import React from 'react';
import { message,Form, Icon, Input, Button } from 'antd';
const FormItem = Form.Item;

function hasErrors(fieldsError) {
  return Object.keys(fieldsError).some(field => fieldsError[field]);
}

class BuyStockForm extends React.Component {
  constructor(){
    super()
    this.state={
      "price":"",
    }

  }
	componentDidMount() {
			// To disabled submit button at the beginning.
			this.props.form.validateFields();
		}
  handleBlur(){
    this.props.form.validateFields((err, values) => {
      let form=this.props.form
      let value=values.stockCode

    /*如果没有写code的话,就提示输入code(自带功能)
    如果写了code的话,先看看sessionStorage里面有没有值,
      如果有的话,就提取该值
      如果没有的话,就根据该code去fetch结果
        如果得到的是不存在该code的话,就提示输入正确的code
        如果得到了对应的价格的话,在placeholder里填入对应值*/
      if (value) {// has a value
        let prices=JSON.parse(sessionStorage.getItem('buy_price'))
        if((prices)!=null&&prices['price']!=null){
            let price=prices['price']
            this.setState({
              price:" (recommended price:"+price+")"
            })
        }
        else{
          //   let get_url1=publish_url+'/api/stockprice?code='+value+"&mode="+'single'
          //     /*price*/
          //     fetch(get_url1)
          //     .then(res=>res.json())
          //     .then(res=>{
          //       if(res['data']['state_code']!=1){
          //         stock['price']=res['data']['list']['price']
          //       }
          //       console.log(res)
          //       let data=this.state.data;
          //       data.push(stock)
          //       this.setState({
          //         data:data
          //       })
          //     })
          // fetch(get_url1)
          // .then(res=>res.json())
          // .then(res=>{
          //   if(res['code']==200){
          //     this.setState({
          //       price:" (recommended price:"+res['data']['price']+")"
          //     })
          //     if(prices==null){
          //       let code_price={}
          //       code_price[value]=res['data']['price']
          //       prices=[code_price,]
          //       sessionStorage.setItem('buy_price',JSON.stringify(prices))
          //     }
          //     else{
          //       let code_price={}
          //       code_price[value]=res['data']['price']
          //       prices.push(code_price)
          //       sessionStorage.setItem('buy_price',JSON.stringify(prices))
          //     }
          //      form.validateFields(['stockCode'], { force: true });
          //   }
          //   else{
          //     console.log('Please enter a correct code!')
          //   }
          // })
          //
          fetch('http://127.0.0.1:8080/publish/code_to_name_price.json')
          .then(res=>res.json())
          .then(res=>{
            if(res['code']==200){
              this.setState({
                price:" (recommended price:"+res['data']['price']+")"
              })
              if(prices==null){
                let code_price={}
                code_price[value]=res['data']['price']
                prices=[code_price,]
                sessionStorage.setItem('buy_price',JSON.stringify(prices))
              }
              else{
                let code_price={}
                code_price[value]=res['data']['price']
                prices.push(code_price)
                sessionStorage.setItem('buy_price',JSON.stringify(prices))
              }
               form.validateFields(['stockCode'], { force: true });
            }
            else{
              console.log('Please enter a correct code!')
            }
          })

        }
      } else {
        /*如果没写code的话,不做处理*/
      }


    })

  }

	handleSubmit = (e) => {
		e.preventDefault();
		this.props.form.validateFields((err, values) => {
			if (!err) {
				console.log('Received values of form: ', values);
        /*预备数据*/
        // let userinfo=JSON.parse(sessionStorage.getItem('userinfo'))
        // let username=userinfo['username']
        let account_id=localStorage.getItem('account_id')
        let stock_code=values.stockCode
        let buy_price=values.buyPrice
        let buy_number=values.buyNumber
        // console.log(username)
        console.log(stock_code)
        console.log(buy_price)
        console.log(buy_number)


        /*将用户名+股票代码+购买价格+购买数量发送给中央交易系统,如果购买成功,则返回1,否则失败(不知道到底传给我什么)*/
        // fetch('http://127.0.0.1:8080/central/name_code_price_amount_buy.json')
        let central_url='http://10.189.143.181:5000/buy'
        fetch(central_url,{
          method:"POST",
          headers:{
            'Content-Type': 'application/json',
          },
          body:JSON.stringify({
             account_id:account_id,
             stock_id:stock_code,
             number:Number(buy_number),
             price:Number(buy_price),
           })
        })
        .then(res=>console.log(res))
        // .then(res=>{
        //   console.log(res)
        //   // if(res['code']==200){
        //   //   /*操作成功*/
        //   //   message.success('购买成功')
        //   // }
        //   // else{
        //   //   message.error("购买失败");
        //   //   console.log(res['msg'])
        //   // }
        // })
			}
		});
	}
  validateStockCode(rule,value,callback){
    /*股票代码只包含数字和英文字母*/
    if(value&&/[^0-9a-zA-Z]/g.test(value)){
      callback('请输入只包含数字和英文字母的股票代码')
    }else{
      callback()
    }
  }
  validatePrice(rule,value,callback){
    /*提醒价格只包含数字和点*/
    if(value&&/[^0-9\.]/g.test(value)){
      callback('请输入只包含数字和点的买入价格')
    }else{
      callback()
    }
  }
  validateAmount(rule,value,callback){
    /*提醒价格只包含数字和点*/
    if(value&&/[^0-9]/g.test(value)){
      callback('请输入只包含数字的买入数量')
    }else{
      callback()
    }
  }
  render() {
    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;

    // Only show error after a field is touched.
    const userNameError = isFieldTouched('userName') && getFieldError('userName');
		const passwordError = isFieldTouched('password') && getFieldError('password');

    return (
      <Form layout="horizontal" style={{marginLeft:50, width:300}} onSubmit={this.handleSubmit.bind(this)}>
        <FormItem
					validateStatus={userNameError ? 'error' : ''}
					label="股票代码"
        >
          {getFieldDecorator('stockCode', {
            rules: [
              { required: true, message: '请输入股票代码!',},
              {validator:this.validateStockCode}
          ],
          })(
            <Input onBlur={this.handleBlur.bind(this)} prefix={<Icon type="user" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder="code" />
          )}
        </FormItem>
        <FormItem
					validateStatus={passwordError ? 'error' : ''}
					label="买入价格"
        >
          {getFieldDecorator('buyPrice', {
            rules: [{ required: true, message: '请输入买入价格!' },
          {validator:this.validatePrice}],
          })(
            <Input prefix={<Icon type="home" style={{ color: 'rgba(0,0,0,.25)' }} />}  placeholder={"price"+this.state.price } />
          )}
        </FormItem>
				<FormItem
					validateStatus={userNameError ? 'error' : ''}
					label="买入数量"
        >
          {getFieldDecorator('buyNumber', {
            rules: [{ required: true, message: '请输入买入数量!' },
          {validator:this.validateAmount}],
          })(
            <Input prefix={<Icon type="lock" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder="number" />
          )}
        </FormItem>

        <FormItem>
          <Button
            type="primary"
            htmlType="submit"
            disabled={hasErrors(getFieldsError())}
          >
            买入
          </Button>
        </FormItem>
      </Form>
    );
  }
}

const BuyStock = Form.create()(BuyStockForm);

export default BuyStock;
